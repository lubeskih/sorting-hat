datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

////////////
// Survey //
////////////
model Survey {
  id Int @id @default(autoincrement())
  surveyTitle String

  // 1-N map with the Question model
  // 1 survey can have many questions
  questions Question[]
  
  // 1-1 map with the Matrix model
  // Score matrix must be created first, before the survey
  scoreMatrix Matrix @relation(fields: [scoreMatrixId], references: [id])
  scoreMatrixId Int

  // 1-N map with the User model
  // 1 survey can have many users
  users User[]
}

model Question {
  id Int @id @default(autoincrement())
  value String
  answerChoice String

  survey Survey @relation(fields: [parentSurveyId], references: [id]) //  relation fields do not exist in the database
  parentSurveyId Int // Survey#id (fk, exists in db)

  answers Answer[]
  usersLookingAtThisQuestions User[]
}

model Answer {
  id Int @id @default(autoincrement())
  value String

  question Question @relation(fields: [parentQuestionId], references: [id])
  parentQuestionId Int // Question#id (fk, exists in db)

  // 1-1 map with the Score model
  // Answer must be created first, before the score
  score Score?

  userAnswer UserAnswer[]

  nextQuestionId Int  // [TODO] probably needs to have a relation to Question
}

/////////////
// Scoring //
/////////////
model Matrix {
  id Int @id @default(autoincrement())
  surveyTitle String
  survey Survey?
  score Score[]
}

model Score {
  id Int @id @default(autoincrement())
  scoreArray String

  // 1-N relationship with Matrix model
  // 1 matrix can have many answer scores
  matrix Matrix @relation(fields: [matrixId], references: [id])
  matrixId Int

  // 1-1 map with the Answer model
  // Answer must be created first, before the score
  answer Answer @relation(fields: [answerId], references: [id])
  answerId Int
}

//////////
// USER //
//////////
model User {
  id Int @id @default(autoincrement())
  createdAt DateTime @default(now())
  sessionToken String
  
  survey Survey @relation(fields: [whichSurveyIsTaking], references: [id])
  whichSurveyIsTaking Int
  isDone Boolean @default(false)
  
  currentQuestion Question @relation(fields: [currentQuestionId], references: [id])
  currentQuestionId Int

  userAnswer UserAnswer[]
}

model UserAnswer {
  id Int @id @default(autoincrement())
  selected Boolean @default(false)

  answer Answer @relation(fields: [answerId], references: [id])
  answerId Int

  user User @relation(fields: [userId], references: [id])
  userId Int

  // no relations, yet
  questionId Int
}